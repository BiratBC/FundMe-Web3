{
  "address": "0x34ab538dc40bE6292D47Fe2aC5A5279708aa7072",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x65b90d7b8af290528134e52bc08d5b7dc2478f752c1a1eda7e1ce90d1006f0eb",
  "receipt": {
    "to": null,
    "from": "0x5C838AEbc9D7E9ecc5fe2bf8b8dA0c054EA8C3c8",
    "contractAddress": "0x34ab538dc40bE6292D47Fe2aC5A5279708aa7072",
    "transactionIndex": 108,
    "gasUsed": "1052615",
    "logsBloom": "0x
    "blockHash": "0x4fa48739f337cdd784c2f4040fa8831a8f5057a2af2790cd71f55ea1c9ac3c9e",
    "transactionHash": "0x65b90d7b8af290528134e52bc08d5b7dc2478f752c1a1eda7e1ce90d1006f0eb",
    "logs": [],
    "blockNumber": 7590340,
    "cumulativeGasUsed": "10674815",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x694AA1769357215DE4FAC081bf1f309aDC325306"
  ],
  "numDeployments": 2,
  "solcInputHash": "28d4fe8281762b67b49ce8e5ba0d16ab",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Birat BC\",\"details\":\"This implements priceFeeds as our library to get current price feed for eth/usd\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements price feed library which uses Price Converter library\"}},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds this contract\"}},\"notice\":\"This contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0x257a8d28fa83d3d942547c8e129ef465e4b5f3f31171e7be4739a4c98da6b4f0\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"//GET FUNDS FROM USERS\\r\\n//WITHDRAW FUNDS\\r\\n//SET MINIMUM FUNDING VALUE\\r\\n\\r\\n//WE WANT THE ONE WHO DEPLOY THIS CONTRACT BE THE OWNER OF THIS FUND ME\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\n//Pragma\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\n//Imports\\r\\nimport \\\"../contracts/PriceConverter.sol\\\";\\r\\n\\r\\n//Error Codes\\r\\n//error contractName__ErrorName\\r\\nerror FundMe__NotOwner(); //replacing require with this will save more gas, this is a custom error name\\r\\n\\r\\n//Interfaces, Libraries, Contracts\\r\\n// Doxygen style\\r\\n\\r\\n/**\\r\\n * @title A contract for crowd funding\\r\\n * @author Birat BC\\r\\n * @notice This contract is to demo a sample funding contract\\r\\n * @dev This implements priceFeeds as our library to get current price feed for eth/usd\\r\\n */\\r\\ncontract FundMe {\\r\\n    //constant , immutable\\r\\n    using PriceConverter for uint256; //using PriceConverter Library in this file and we can use all the functions inside PriceConverter Library takes uint256\\r\\n\\r\\n    uint256 public constant MINIMUM_USD = 50 * 1e18; //this is in wei\\r\\n\\r\\n    //State Variables -> these state or storage variables are stored in Storage as a large list of array\\r\\n    address[] private s_funders;\\r\\n    mapping(address => uint256) private s_addressToAmountFunded; //creating a map[key value pair] to track the record of amount sent by funders with their name\\r\\n\\r\\n    //Owner\\r\\n    address public immutable i_owner; //naming convention for immutable variable i_\\r\\n\\r\\n    //Creating an object of AggregatorV3 to pass address of different data feeds while converting\\r\\n    AggregatorV3Interface public s_priceFeed;\\r\\n    modifier onlyOwner() {\\r\\n        // require(msg.sender == i_owner, \\\"Sender is not owner\\\");\\r\\n        if (msg.sender != i_owner) {\\r\\n            revert FundMe__NotOwner();\\r\\n        }\\r\\n\\r\\n        _; //its like next() or run the other code\\r\\n    }\\r\\n\\r\\n    constructor(address priceFeedAddress) {\\r\\n        //Here the priceFeedAddress depends upon the chain network on which the deployer of this contract is\\r\\n        i_owner = msg.sender; //msg.sender contains the address of the deployment address of this contract\\r\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress); //get the price feeed  of the network in which this contract is deployed\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice This function funds this contract\\r\\n     * @dev This implements price feed library which uses Price Converter library\\r\\n     */\\r\\n\\r\\n    function fund() public payable {\\r\\n        //Want to set a minimum fund amount in USD\\r\\n        //1. How do we send ETH to this contract?\\r\\n        require(\\r\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\r\\n            \\\"You have to atleast send 1 ETH\\\"\\r\\n        ); //to get the value of what user is sending , its global\\r\\n        s_funders.push(msg.sender); //pushes the sendeers address to the funders stack\\r\\n        s_addressToAmountFunded[msg.sender] = msg.value;\\r\\n    }\\r\\n\\r\\n    function withdraw() public onlyOwner {\\r\\n        // require(msg.sender == owner, \\\"Sender is not owner\\\");\\r\\n\\r\\n        for (\\r\\n            uint256 funderIndex = 0;\\r\\n            funderIndex < s_funders.length;\\r\\n            funderIndex++\\r\\n        ) {\\r\\n            address funder = s_funders[funderIndex];\\r\\n            s_addressToAmountFunded[funder] = 0; //the amount to the funder's address will be set to 0\\r\\n        }\\r\\n        //reset the array funders\\r\\n        s_funders = new address[](0); //cleaning the memory\\r\\n        //actually withdraw the amount\\r\\n\\r\\n        //NATIVE FUNCTIONS TO SEND MONEY : transfer, send and call\\r\\n\\r\\n        //transfer -> returns error\\r\\n        //msg.sender = address\\r\\n        //payble(msg.sender) = payable address\\r\\n        // payable(msg.sender).transfer(address(this).balance); //this is the way of sending eth from this contract address(this) means whole contract\\r\\n        // send -> returns -= bool\\r\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\r\\n        // require(sendSuccess, \\\"send Failed\\\");\\r\\n        //call\\r\\n        (bool callSuccess, ) = payable(msg.sender).call{\\r\\n            value: address(this).balance\\r\\n        }(\\\"\\\");\\r\\n        require(callSuccess, \\\"call Failed\\\");\\r\\n    }\\r\\n\\r\\n    function cheaperWithdraw() public payable onlyOwner {\\r\\n        address[] memory funders = s_funders; //memory uses cheap gas price while storage uses huge gas price\\r\\n        //mappings not available in memory\\r\\n\\r\\n        for (\\r\\n            uint256 funderIndex = 0;\\r\\n            funderIndex < funders.length;\\r\\n            funderIndex++\\r\\n        ) {\\r\\n            //Resetting all the funded money to zero\\r\\n            address funder = funders[funderIndex];\\r\\n            s_addressToAmountFunded[funder] = 0;\\r\\n        }\\r\\n        s_funders = new address[](0);\\r\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success);\\r\\n    }\\r\\n\\r\\n    //Getter functions\\r\\n    //1. get Owner\\r\\n    function getOwner() public view returns (address) {\\r\\n        return i_owner;\\r\\n    }\\r\\n\\r\\n    //2. get funder\\r\\n    function getFunder(uint256 index) public view returns (address) {\\r\\n        return s_funders[index];\\r\\n    }\\r\\n\\r\\n    //3. get ammount funded from respective accounts\\r\\n\\r\\n    function getAddressToAmountFunded(\\r\\n        address funder\\r\\n    ) public view returns (uint256) {\\r\\n        return s_addressToAmountFunded[funder];\\r\\n    }\\r\\n\\r\\n    //4. get price feed\\r\\n\\r\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\r\\n        return s_priceFeed;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    \\r\\n\\r\\n    //WHAT HAPPENS IF SOMEONE  SENDS THIS CONTRACT ETH WITHOUT CALLING THE FUND FUNCTION WHICH CAN BE POSSIBLE\\r\\n\\r\\n    //fallback()\\r\\n    //receive()\\r\\n\\r\\n    //if someone accidently sends us money without calling the fuind() function these two advance function will divert to call the funde function\\r\\n    //automatically\\r\\n    receive() external payable {\\r\\n        fund();\\r\\n    }\\r\\n\\r\\n    fallback() external payable {\\r\\n        fund();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc239a76b4abbdbadd906ca09c06923cdc3c1804942fb30a0a0da3b66233f8a06\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\nlibrary PriceConverter {\\r\\n    function getPrice(AggregatorV3Interface priceFeed) public view returns (uint256) {\\r\\n        // //ABI\\r\\n        // //Address : 0x694AA1769357215DE4FAC081bf1f309aDC325306 (eth to usd for sepolia)\\r\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface( //this will only get the priceFeed for the chain network with 0x694AA1769357215DE4FAC081bf1f309aDC325306 address\\r\\n        //     0x694AA1769357215DE4FAC081bf1f309aDC325306\\r\\n        // );\\r\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\r\\n        //ETH in terms of USD\\r\\n        return uint256(price * 1e10);\\r\\n    }\\r\\n\\r\\n    function getConversionRate(\\r\\n        uint256 ethAmount,\\r\\n        AggregatorV3Interface priceFeed\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 ethPrice = getPrice(priceFeed);\\r\\n        return (ethPrice * ethAmount) / 1e18;\\r\\n    }\\r\\n\\r\\n    \\r\\n    // function getVersion() public view returns (uint256) {\\r\\n    //     AggregatorV3Interface priceFeed = AggregatorV3Interface(\\r\\n    //         0x694AA1769357215DE4FAC081bf1f309aDC325306\\r\\n    //     );\\r\\n    //     return priceFeed.version();\\r\\n    // }\\r\\n}\\r\\n\",\"keccak256\":\"0x9162bddc3921416c6be0647c72991b21ae889e019fb7695f600420ec3255d15d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200133938038062001339833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c6111ac6200018d600039600081816103c4015281816106130152818161066301528181610859015261093801526111ac6000f3fe6080604052600436106100955760003560e01c80639e87a5cd116100595780639e87a5cd14610183578063b60d4288146101ae578063be2693f0146101b8578063d7b4750c146101c2578063dba6335f146101ff576100a4565b80630343fb25146100ae5780630ec3b027146100eb5780633ccfd60b146101165780636b69a5921461012d578063893d20e814610158576100a4565b366100a4576100a261022a565b005b6100ac61022a565b005b3480156100ba57600080fd5b506100d560048036038101906100d09190610b3a565b610353565b6040516100e29190610b80565b60405180910390f35b3480156100f757600080fd5b5061010061039c565b60405161010d9190610bfa565b60405180910390f35b34801561012257600080fd5b5061012b6103c2565b005b34801561013957600080fd5b50610142610602565b60405161014f9190610b80565b60405180910390f35b34801561016457600080fd5b5061016d61060f565b60405161017a9190610c24565b60405180910390f35b34801561018f57600080fd5b50610198610637565b6040516101a59190610bfa565b60405180910390f35b6101b661022a565b005b6101c0610661565b005b3480156101ce57600080fd5b506101e960048036038101906101e49190610c6b565b6108ef565b6040516101f69190610c24565b60405180910390f35b34801561020b57600080fd5b50610214610936565b6040516102219190610c24565b60405180910390f35b6802b5e3af16b1880000610269600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461095a90919063ffffffff16565b10156102aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a190610cf5565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610447576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104f257600080828154811061046c5761046b610d15565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104ea90610d73565b91505061044a565b50600067ffffffffffffffff81111561050e5761050d610dbc565b5b60405190808252806020026020018201604052801561053c5781602001602082028036833780820191505090505b5060009080519060200190610552929190610a30565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161057990610e1c565b60006040518083038185875af1925050503d80600081146105b6576040519150601f19603f3d011682016040523d82523d6000602084013e6105bb565b606091505b50509050806105ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f690610e7d565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106e6576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561076957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161071f575b5050505050905060005b81518110156107f457600082828151811061079157610790610d15565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107ec90610d73565b915050610773565b50600067ffffffffffffffff8111156108105761080f610dbc565b5b60405190808252806020026020018201604052801561083e5781602001602082028036833780820191505090505b5060009080519060200190610854929190610a30565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161089b90610e1c565b60006040518083038185875af1925050503d80600081146108d8576040519150601f19603f3d011682016040523d82523d6000602084013e6108dd565b606091505b50509050806108eb57600080fd5b5050565b600080828154811061090457610903610d15565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008061096683610990565b9050670de0b6b3a7640000848261097d9190610e9d565b6109879190610f26565b91505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156109d957600080fd5b505afa1580156109ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a119190610fe4565b5050509150506402540be40081610a28919061105f565b915050919050565b828054828255906000526020600020908101928215610aa9579160200282015b82811115610aa85782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a50565b5b509050610ab69190610aba565b5090565b5b80821115610ad3576000816000905550600101610abb565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b0782610adc565b9050919050565b610b1781610afc565b8114610b2257600080fd5b50565b600081359050610b3481610b0e565b92915050565b600060208284031215610b5057610b4f610ad7565b5b6000610b5e84828501610b25565b91505092915050565b6000819050919050565b610b7a81610b67565b82525050565b6000602082019050610b956000830184610b71565b92915050565b6000819050919050565b6000610bc0610bbb610bb684610adc565b610b9b565b610adc565b9050919050565b6000610bd282610ba5565b9050919050565b6000610be482610bc7565b9050919050565b610bf481610bd9565b82525050565b6000602082019050610c0f6000830184610beb565b92915050565b610c1e81610afc565b82525050565b6000602082019050610c396000830184610c15565b92915050565b610c4881610b67565b8114610c5357600080fd5b50565b600081359050610c6581610c3f565b92915050565b600060208284031215610c8157610c80610ad7565b5b6000610c8f84828501610c56565b91505092915050565b600082825260208201905092915050565b7f596f75206861766520746f2061746c656173742073656e642031204554480000600082015250565b6000610cdf601e83610c98565b9150610cea82610ca9565b602082019050919050565b60006020820190508181036000830152610d0e81610cd2565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d7e82610b67565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610db157610db0610d44565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610e06600083610deb565b9150610e1182610df6565b600082019050919050565b6000610e2782610df9565b9150819050919050565b7f63616c6c204661696c6564000000000000000000000000000000000000000000600082015250565b6000610e67600b83610c98565b9150610e7282610e31565b602082019050919050565b60006020820190508181036000830152610e9681610e5a565b9050919050565b6000610ea882610b67565b9150610eb383610b67565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610eec57610eeb610d44565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f3182610b67565b9150610f3c83610b67565b925082610f4c57610f4b610ef7565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f7681610f57565b8114610f8157600080fd5b50565b600081519050610f9381610f6d565b92915050565b6000819050919050565b610fac81610f99565b8114610fb757600080fd5b50565b600081519050610fc981610fa3565b92915050565b600081519050610fde81610c3f565b92915050565b600080600080600060a0868803121561100057610fff610ad7565b5b600061100e88828901610f84565b955050602061101f88828901610fba565b945050604061103088828901610fcf565b935050606061104188828901610fcf565b925050608061105288828901610f84565b9150509295509295909350565b600061106a82610f99565b915061107583610f99565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156110b4576110b3610d44565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110f1576110f0610d44565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561112e5761112d610d44565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561116b5761116a610d44565b5b82820290509291505056fea2646970667358221220692379e9100f11c3c5d0a320c8a0aec05d4ec20b55dc0f96d9a3b3cc3d181a9964736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100955760003560e01c80639e87a5cd116100595780639e87a5cd14610183578063b60d4288146101ae578063be2693f0146101b8578063d7b4750c146101c2578063dba6335f146101ff576100a4565b80630343fb25146100ae5780630ec3b027146100eb5780633ccfd60b146101165780636b69a5921461012d578063893d20e814610158576100a4565b366100a4576100a261022a565b005b6100ac61022a565b005b3480156100ba57600080fd5b506100d560048036038101906100d09190610b3a565b610353565b6040516100e29190610b80565b60405180910390f35b3480156100f757600080fd5b5061010061039c565b60405161010d9190610bfa565b60405180910390f35b34801561012257600080fd5b5061012b6103c2565b005b34801561013957600080fd5b50610142610602565b60405161014f9190610b80565b60405180910390f35b34801561016457600080fd5b5061016d61060f565b60405161017a9190610c24565b60405180910390f35b34801561018f57600080fd5b50610198610637565b6040516101a59190610bfa565b60405180910390f35b6101b661022a565b005b6101c0610661565b005b3480156101ce57600080fd5b506101e960048036038101906101e49190610c6b565b6108ef565b6040516101f69190610c24565b60405180910390f35b34801561020b57600080fd5b50610214610936565b6040516102219190610c24565b60405180910390f35b6802b5e3af16b1880000610269600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461095a90919063ffffffff16565b10156102aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a190610cf5565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610447576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104f257600080828154811061046c5761046b610d15565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104ea90610d73565b91505061044a565b50600067ffffffffffffffff81111561050e5761050d610dbc565b5b60405190808252806020026020018201604052801561053c5781602001602082028036833780820191505090505b5060009080519060200190610552929190610a30565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161057990610e1c565b60006040518083038185875af1925050503d80600081146105b6576040519150601f19603f3d011682016040523d82523d6000602084013e6105bb565b606091505b50509050806105ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f690610e7d565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106e6576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561076957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161071f575b5050505050905060005b81518110156107f457600082828151811061079157610790610d15565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107ec90610d73565b915050610773565b50600067ffffffffffffffff8111156108105761080f610dbc565b5b60405190808252806020026020018201604052801561083e5781602001602082028036833780820191505090505b5060009080519060200190610854929190610a30565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161089b90610e1c565b60006040518083038185875af1925050503d80600081146108d8576040519150601f19603f3d011682016040523d82523d6000602084013e6108dd565b606091505b50509050806108eb57600080fd5b5050565b600080828154811061090457610903610d15565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008061096683610990565b9050670de0b6b3a7640000848261097d9190610e9d565b6109879190610f26565b91505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156109d957600080fd5b505afa1580156109ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a119190610fe4565b5050509150506402540be40081610a28919061105f565b915050919050565b828054828255906000526020600020908101928215610aa9579160200282015b82811115610aa85782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a50565b5b509050610ab69190610aba565b5090565b5b80821115610ad3576000816000905550600101610abb565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b0782610adc565b9050919050565b610b1781610afc565b8114610b2257600080fd5b50565b600081359050610b3481610b0e565b92915050565b600060208284031215610b5057610b4f610ad7565b5b6000610b5e84828501610b25565b91505092915050565b6000819050919050565b610b7a81610b67565b82525050565b6000602082019050610b956000830184610b71565b92915050565b6000819050919050565b6000610bc0610bbb610bb684610adc565b610b9b565b610adc565b9050919050565b6000610bd282610ba5565b9050919050565b6000610be482610bc7565b9050919050565b610bf481610bd9565b82525050565b6000602082019050610c0f6000830184610beb565b92915050565b610c1e81610afc565b82525050565b6000602082019050610c396000830184610c15565b92915050565b610c4881610b67565b8114610c5357600080fd5b50565b600081359050610c6581610c3f565b92915050565b600060208284031215610c8157610c80610ad7565b5b6000610c8f84828501610c56565b91505092915050565b600082825260208201905092915050565b7f596f75206861766520746f2061746c656173742073656e642031204554480000600082015250565b6000610cdf601e83610c98565b9150610cea82610ca9565b602082019050919050565b60006020820190508181036000830152610d0e81610cd2565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d7e82610b67565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610db157610db0610d44565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610e06600083610deb565b9150610e1182610df6565b600082019050919050565b6000610e2782610df9565b9150819050919050565b7f63616c6c204661696c6564000000000000000000000000000000000000000000600082015250565b6000610e67600b83610c98565b9150610e7282610e31565b602082019050919050565b60006020820190508181036000830152610e9681610e5a565b9050919050565b6000610ea882610b67565b9150610eb383610b67565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610eec57610eeb610d44565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f3182610b67565b9150610f3c83610b67565b925082610f4c57610f4b610ef7565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f7681610f57565b8114610f8157600080fd5b50565b600081519050610f9381610f6d565b92915050565b6000819050919050565b610fac81610f99565b8114610fb757600080fd5b50565b600081519050610fc981610fa3565b92915050565b600081519050610fde81610c3f565b92915050565b600080600080600060a0868803121561100057610fff610ad7565b5b600061100e88828901610f84565b955050602061101f88828901610fba565b945050604061103088828901610fcf565b935050606061104188828901610fcf565b925050608061105288828901610f84565b9150509295509295909350565b600061106a82610f99565b915061107583610f99565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156110b4576110b3610d44565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110f1576110f0610d44565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561112e5761112d610d44565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561116b5761116a610d44565b5b82820290509291505056fea2646970667358221220692379e9100f11c3c5d0a320c8a0aec05d4ec20b55dc0f96d9a3b3cc3d181a9964736f6c63430008080033",
  "devdoc": {
    "author": "Birat BC",
    "details": "This implements priceFeeds as our library to get current price feed for eth/usd",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "This implements price feed library which uses Price Converter library"
      }
    },
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "This function funds this contract"
      }
    },
    "notice": "This contract is to demo a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 62,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 66,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 71,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}