{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "//GET FUNDS FROM USERS\r\n//WITHDRAW FUNDS\r\n//SET MINIMUM FUNDING VALUE\r\n\r\n//WE WANT THE ONE WHO DEPLOY THIS CONTRACT BE THE OWNER OF THIS FUND ME\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.8;\r\n\r\nimport \"../contracts/PriceConverter.sol\";\r\n\r\nerror NotOwner(); //replacing require with this will save more gas\r\n\r\ncontract FundMe {\r\n    //constant , immutable\r\n    using PriceConverter for uint256; //using PriceConverter Library in this file and we can use all the functions inside PriceConverter Library takes uint256\r\n\r\n    uint256 public constant MINIMUM_USD = 50 * 1e18; //this is in wei\r\n\r\n    address[] public funders;\r\n\r\n    mapping(address => uint256) public addressToAmountFunded; //creating a map[key value pair] to track the record of amount sent by funders with their name\r\n\r\n    //Owner\r\n    address public immutable i_owner; //naming convention for immutable variable i_\r\n\r\n    //Creating an object of AggregatorV3 to pass address of different data feeds while converting\r\n    AggregatorV3Interface public priceFeed;\r\n\r\n    constructor(address priceFeedAddress) { //Here the priceFeedAddress depends upon the chain network on which the deployer of this contract is\r\n        i_owner = msg.sender;\r\n        priceFeed = AggregatorV3Interface(priceFeedAddress); \r\n    }\r\n\r\n    function fund() public payable {\r\n        //Want to set a minimum fund amount in USD\r\n        //1. How do we send ETH to this contract?\r\n        require(\r\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\r\n            \"You have to atleast send 1 ETH\"\r\n        ); //to get the value of what user is sending , its global\r\n        funders.push(msg.sender); //pushes the sendeers address to the funders stack\r\n        addressToAmountFunded[msg.sender] = msg.value;\r\n    }\r\n\r\n    function withdraw() public onlyOwner {\r\n        // require(msg.sender == owner, \"Sender is not owner\");\r\n\r\n        for (\r\n            uint256 funderIndex = 0;\r\n            funderIndex < funders.length;\r\n            funderIndex++\r\n        ) {\r\n            address funder = funders[funderIndex];\r\n            addressToAmountFunded[funder] = 0; //the amount to the funder's address will be set to 0\r\n        }\r\n        //reset the array funders\r\n        funders = new address[](0); //cleaning the memory\r\n        //actually withdraw the amount\r\n\r\n        //NATIVE FUNCTIONS TO SEND MONEY : transfer, send and call\r\n\r\n        //transfer -> returns error\r\n        //msg.sender = address\r\n        //payble(msg.sender) = payable address\r\n        // payable(msg.sender).transfer(address(this).balance); //this is the way of sending eth from this contract address(this) means whole contract\r\n        // send -> returns -= bool\r\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\r\n        // require(sendSuccess, \"send Failed\");\r\n        //call\r\n        (bool callSuccess, ) = payable(msg.sender).call{\r\n            value: address(this).balance\r\n        }(\"\");\r\n        require(callSuccess, \"call Failed\");\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        // require(msg.sender == i_owner, \"Sender is not owner\");\r\n        if (msg.sender != i_owner) {\r\n            revert NotOwner();\r\n        }\r\n        _; //its like next() or run the other code\r\n    }\r\n\r\n    //WHAT HAPPENS IF SOMEONE  SENDS THIS CONTRACT ETH WITHOUT CALLING THE FUND FUNCTION WHICH CAN BE POSSIBLE\r\n\r\n    //fallback()\r\n    //receive()\r\n\r\n\r\n//if someone accidently sends us money without calling the fuind() function these two advance function will divert to call the funde function \r\n//automatically \r\n    receive() external payable { \r\n        fund();\r\n    }\r\n\r\n    fallback() external payable { \r\n        fund();\r\n    }\r\n}"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.8;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary PriceConverter {\r\n    function getPrice(AggregatorV3Interface priceFeed) public view returns (uint256) {\r\n        // //ABI\r\n        // //Address : 0x694AA1769357215DE4FAC081bf1f309aDC325306 (eth to usd for sepolia)\r\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface( //this will only get the priceFeed for the chain network with 0x694AA1769357215DE4FAC081bf1f309aDC325306 address\r\n        //     0x694AA1769357215DE4FAC081bf1f309aDC325306\r\n        // );\r\n        (, int256 price, , , ) = priceFeed.latestRoundData();\r\n        //ETH in terms of USD\r\n        return uint256(price * 1e10);\r\n    }\r\n\r\n    function getConversionRate(\r\n        uint256 ethAmount,\r\n        AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint256) {\r\n        uint256 ethPrice = getPrice(priceFeed);\r\n        return (ethPrice * ethAmount) / 1e18;\r\n    }\r\n\r\n    \r\n    // function getVersion() public view returns (uint256) {\r\n    //     AggregatorV3Interface priceFeed = AggregatorV3Interface(\r\n    //         0x694AA1769357215DE4FAC081bf1f309aDC325306\r\n    //     );\r\n    //     return priceFeed.version();\r\n    // }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}