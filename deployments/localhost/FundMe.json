{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x4bbe9ce0a7f840dbcd702a17a078412c07eabb037d0d93d8c3a22964c5580b9b",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "854473",
    "logsBloom": "0x
    "blockHash": "0x8ab07b914286d08791f7d81fe65596b048afff2d33681fde727d61ce38e01ec3",
    "transactionHash": "0x4bbe9ce0a7f840dbcd702a17a078412c07eabb037d0d93d8c3a22964c5580b9b",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "854473",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "57c525a52fc6ebea369da10a2ee2cf9a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Birat BC\",\"details\":\"This implements priceFeeds as our library to get current price feed for eth/usd\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements price feed library which uses Price Converter library\"}},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds this contract\"}},\"notice\":\"This contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0x257a8d28fa83d3d942547c8e129ef465e4b5f3f31171e7be4739a4c98da6b4f0\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"//GET FUNDS FROM USERS\\r\\n//WITHDRAW FUNDS\\r\\n//SET MINIMUM FUNDING VALUE\\r\\n\\r\\n//WE WANT THE ONE WHO DEPLOY THIS CONTRACT BE THE OWNER OF THIS FUND ME\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\n//Pragma\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\n//Imports\\r\\nimport \\\"../contracts/PriceConverter.sol\\\";\\r\\n\\r\\n\\r\\n//Error Codes\\r\\n//error contractName__ErrorName\\r\\nerror FundMe__NotOwner(); //replacing require with this will save more gas, this is a custom error name\\r\\n\\r\\n//Interfaces, Libraries, Contracts\\r\\n// Doxygen style\\r\\n\\r\\n/**\\r\\n * @title A contract for crowd funding\\r\\n * @author Birat BC\\r\\n * @notice This contract is to demo a sample funding contract\\r\\n * @dev This implements priceFeeds as our library to get current price feed for eth/usd\\r\\n */\\r\\ncontract FundMe {\\r\\n    //constant , immutable\\r\\n    using PriceConverter for uint256; //using PriceConverter Library in this file and we can use all the functions inside PriceConverter Library takes uint256\\r\\n\\r\\n    uint256 public constant MINIMUM_USD = 50 * 1e18; //this is in wei\\r\\n\\r\\n    //State Variables\\r\\n    address[] public funders;\\r\\n    mapping(address => uint256) public addressToAmountFunded; //creating a map[key value pair] to track the record of amount sent by funders with their name\\r\\n\\r\\n    //Owner\\r\\n    address public immutable i_owner; //naming convention for immutable variable i_\\r\\n\\r\\n    //Creating an object of AggregatorV3 to pass address of different data feeds while converting\\r\\n    AggregatorV3Interface public priceFeed;\\r\\n    modifier onlyOwner() {\\r\\n        // require(msg.sender == i_owner, \\\"Sender is not owner\\\");\\r\\n        if (msg.sender != i_owner) {\\r\\n            revert FundMe__NotOwner();\\r\\n        }\\r\\n\\r\\n        _; //its like next() or run the other code\\r\\n    }\\r\\n\\r\\n    constructor(address priceFeedAddress) {\\r\\n        //Here the priceFeedAddress depends upon the chain network on which the deployer of this contract is\\r\\n        i_owner = msg.sender; //msg.sender contains the address of the deployment address of this contract\\r\\n        priceFeed = AggregatorV3Interface(priceFeedAddress); //get the price feeed  of the network in which this contract is deployed\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice This function funds this contract\\r\\n     * @dev This implements price feed library which uses Price Converter library\\r\\n     */\\r\\n\\r\\n    function fund() public payable {\\r\\n        //Want to set a minimum fund amount in USD\\r\\n        //1. How do we send ETH to this contract?\\r\\n        require(\\r\\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\\r\\n            \\\"You have to atleast send 1 ETH\\\"\\r\\n        ); //to get the value of what user is sending , its global\\r\\n        funders.push(msg.sender); //pushes the sendeers address to the funders stack\\r\\n        addressToAmountFunded[msg.sender] = msg.value;\\r\\n    }\\r\\n\\r\\n    function withdraw() public onlyOwner {\\r\\n        // require(msg.sender == owner, \\\"Sender is not owner\\\");\\r\\n\\r\\n        for (\\r\\n            uint256 funderIndex = 0;\\r\\n            funderIndex < funders.length;\\r\\n            funderIndex++\\r\\n        ) {\\r\\n            address funder = funders[funderIndex];\\r\\n            addressToAmountFunded[funder] = 0; //the amount to the funder's address will be set to 0\\r\\n        }\\r\\n        //reset the array funders\\r\\n        funders = new address[](0); //cleaning the memory\\r\\n        //actually withdraw the amount\\r\\n\\r\\n        //NATIVE FUNCTIONS TO SEND MONEY : transfer, send and call\\r\\n\\r\\n        //transfer -> returns error\\r\\n        //msg.sender = address\\r\\n        //payble(msg.sender) = payable address\\r\\n        // payable(msg.sender).transfer(address(this).balance); //this is the way of sending eth from this contract address(this) means whole contract\\r\\n        // send -> returns -= bool\\r\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\r\\n        // require(sendSuccess, \\\"send Failed\\\");\\r\\n        //call\\r\\n        (bool callSuccess, ) = payable(msg.sender).call{\\r\\n            value: address(this).balance\\r\\n        }(\\\"\\\");\\r\\n        require(callSuccess, \\\"call Failed\\\");\\r\\n    }\\r\\n\\r\\n    //WHAT HAPPENS IF SOMEONE  SENDS THIS CONTRACT ETH WITHOUT CALLING THE FUND FUNCTION WHICH CAN BE POSSIBLE\\r\\n\\r\\n    //fallback()\\r\\n    //receive()\\r\\n\\r\\n    //if someone accidently sends us money without calling the fuind() function these two advance function will divert to call the funde function\\r\\n    //automatically\\r\\n    receive() external payable {\\r\\n        fund();\\r\\n    }\\r\\n\\r\\n    fallback() external payable {\\r\\n        fund();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x49bc31d4e3fbb4f85e6d9a861df413293b7c1c51f7390534a20659597e5678d8\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\nlibrary PriceConverter {\\r\\n    function getPrice(AggregatorV3Interface priceFeed) public view returns (uint256) {\\r\\n        // //ABI\\r\\n        // //Address : 0x694AA1769357215DE4FAC081bf1f309aDC325306 (eth to usd for sepolia)\\r\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface( //this will only get the priceFeed for the chain network with 0x694AA1769357215DE4FAC081bf1f309aDC325306 address\\r\\n        //     0x694AA1769357215DE4FAC081bf1f309aDC325306\\r\\n        // );\\r\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\r\\n        //ETH in terms of USD\\r\\n        return uint256(price * 1e10);\\r\\n    }\\r\\n\\r\\n    function getConversionRate(\\r\\n        uint256 ethAmount,\\r\\n        AggregatorV3Interface priceFeed\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 ethPrice = getPrice(priceFeed);\\r\\n        return (ethPrice * ethAmount) / 1e18;\\r\\n    }\\r\\n\\r\\n    \\r\\n    // function getVersion() public view returns (uint256) {\\r\\n    //     AggregatorV3Interface priceFeed = AggregatorV3Interface(\\r\\n    //         0x694AA1769357215DE4FAC081bf1f309aDC325306\\r\\n    //     );\\r\\n    //     return priceFeed.version();\\r\\n    // }\\r\\n}\\r\\n\",\"keccak256\":\"0x9162bddc3921416c6be0647c72991b21ae889e019fb7695f600420ec3255d15d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610f77380380610f7783398181016040528101906100329190610113565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610140565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100e0826100b5565b9050919050565b6100f0816100d5565b81146100fb57600080fd5b50565b60008151905061010d816100e7565b92915050565b600060208284031215610129576101286100b0565b5b6000610137848285016100fe565b91505092915050565b60805160601c610e12610165600039600081816102d4015261055f0152610e126000f3fe6080604052600436106100745760003560e01c8063741bef1a1161004e578063741bef1a1461010c578063b60d428814610137578063dba6335f14610141578063dc0d3dff1461016c57610083565b80633ccfd60b1461008d5780633e47d6f3146100a45780636b69a592146100e157610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100a26102d2565b005b3480156100b057600080fd5b506100cb60048036038101906100c691906107a0565b610512565b6040516100d891906107e6565b60405180910390f35b3480156100ed57600080fd5b506100f661052a565b60405161010391906107e6565b60405180910390f35b34801561011857600080fd5b50610121610537565b60405161012e9190610860565b60405180910390f35b61013f6101a9565b005b34801561014d57600080fd5b5061015661055d565b604051610163919061088a565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e91906108d1565b610581565b6040516101a0919061088a565b60405180910390f35b6802b5e3af16b18800006101e8600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105c090919063ffffffff16565b1015610229576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102209061095b565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610357576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561040257600080828154811061037c5761037b61097b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806103fa906109d9565b91505061035a565b50600067ffffffffffffffff81111561041e5761041d610a22565b5b60405190808252806020026020018201604052801561044c5781602001602082028036833780820191505090505b5060009080519060200190610462929190610696565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161048990610a82565b60006040518083038185875af1925050503d80600081146104c6576040519150601f19603f3d011682016040523d82523d6000602084013e6104cb565b606091505b505090508061050f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050690610ae3565b60405180910390fd5b50565b60016020528060005260406000206000915090505481565b6802b5e3af16b188000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000818154811061059157600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105cc836105f6565b9050670de0b6b3a764000084826105e39190610b03565b6105ed9190610b8c565b91505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561063f57600080fd5b505afa158015610653573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106779190610c4a565b5050509150506402540be4008161068e9190610cc5565b915050919050565b82805482825590600052602060002090810192821561070f579160200282015b8281111561070e5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106b6565b5b50905061071c9190610720565b5090565b5b80821115610739576000816000905550600101610721565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061076d82610742565b9050919050565b61077d81610762565b811461078857600080fd5b50565b60008135905061079a81610774565b92915050565b6000602082840312156107b6576107b561073d565b5b60006107c48482850161078b565b91505092915050565b6000819050919050565b6107e0816107cd565b82525050565b60006020820190506107fb60008301846107d7565b92915050565b6000819050919050565b600061082661082161081c84610742565b610801565b610742565b9050919050565b60006108388261080b565b9050919050565b600061084a8261082d565b9050919050565b61085a8161083f565b82525050565b60006020820190506108756000830184610851565b92915050565b61088481610762565b82525050565b600060208201905061089f600083018461087b565b92915050565b6108ae816107cd565b81146108b957600080fd5b50565b6000813590506108cb816108a5565b92915050565b6000602082840312156108e7576108e661073d565b5b60006108f5848285016108bc565b91505092915050565b600082825260208201905092915050565b7f596f75206861766520746f2061746c656173742073656e642031204554480000600082015250565b6000610945601e836108fe565b91506109508261090f565b602082019050919050565b6000602082019050818103600083015261097481610938565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109e4826107cd565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610a1757610a166109aa565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610a6c600083610a51565b9150610a7782610a5c565b600082019050919050565b6000610a8d82610a5f565b9150819050919050565b7f63616c6c204661696c6564000000000000000000000000000000000000000000600082015250565b6000610acd600b836108fe565b9150610ad882610a97565b602082019050919050565b60006020820190508181036000830152610afc81610ac0565b9050919050565b6000610b0e826107cd565b9150610b19836107cd565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610b5257610b516109aa565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b97826107cd565b9150610ba2836107cd565b925082610bb257610bb1610b5d565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610bdc81610bbd565b8114610be757600080fd5b50565b600081519050610bf981610bd3565b92915050565b6000819050919050565b610c1281610bff565b8114610c1d57600080fd5b50565b600081519050610c2f81610c09565b92915050565b600081519050610c44816108a5565b92915050565b600080600080600060a08688031215610c6657610c6561073d565b5b6000610c7488828901610bea565b9550506020610c8588828901610c20565b9450506040610c9688828901610c35565b9350506060610ca788828901610c35565b9250506080610cb888828901610bea565b9150509295509295909350565b6000610cd082610bff565b9150610cdb83610bff565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610d1a57610d196109aa565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610d5757610d566109aa565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610d9457610d936109aa565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610dd157610dd06109aa565b5b82820290509291505056fea2646970667358221220deaa090be885b321128f9df72f2f676fd979f9634b3f6d21d0859bd68582285964736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c8063741bef1a1161004e578063741bef1a1461010c578063b60d428814610137578063dba6335f14610141578063dc0d3dff1461016c57610083565b80633ccfd60b1461008d5780633e47d6f3146100a45780636b69a592146100e157610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100a26102d2565b005b3480156100b057600080fd5b506100cb60048036038101906100c691906107a0565b610512565b6040516100d891906107e6565b60405180910390f35b3480156100ed57600080fd5b506100f661052a565b60405161010391906107e6565b60405180910390f35b34801561011857600080fd5b50610121610537565b60405161012e9190610860565b60405180910390f35b61013f6101a9565b005b34801561014d57600080fd5b5061015661055d565b604051610163919061088a565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e91906108d1565b610581565b6040516101a0919061088a565b60405180910390f35b6802b5e3af16b18800006101e8600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105c090919063ffffffff16565b1015610229576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102209061095b565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610357576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561040257600080828154811061037c5761037b61097b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806103fa906109d9565b91505061035a565b50600067ffffffffffffffff81111561041e5761041d610a22565b5b60405190808252806020026020018201604052801561044c5781602001602082028036833780820191505090505b5060009080519060200190610462929190610696565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161048990610a82565b60006040518083038185875af1925050503d80600081146104c6576040519150601f19603f3d011682016040523d82523d6000602084013e6104cb565b606091505b505090508061050f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050690610ae3565b60405180910390fd5b50565b60016020528060005260406000206000915090505481565b6802b5e3af16b188000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000818154811061059157600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105cc836105f6565b9050670de0b6b3a764000084826105e39190610b03565b6105ed9190610b8c565b91505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561063f57600080fd5b505afa158015610653573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106779190610c4a565b5050509150506402540be4008161068e9190610cc5565b915050919050565b82805482825590600052602060002090810192821561070f579160200282015b8281111561070e5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106b6565b5b50905061071c9190610720565b5090565b5b80821115610739576000816000905550600101610721565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061076d82610742565b9050919050565b61077d81610762565b811461078857600080fd5b50565b60008135905061079a81610774565b92915050565b6000602082840312156107b6576107b561073d565b5b60006107c48482850161078b565b91505092915050565b6000819050919050565b6107e0816107cd565b82525050565b60006020820190506107fb60008301846107d7565b92915050565b6000819050919050565b600061082661082161081c84610742565b610801565b610742565b9050919050565b60006108388261080b565b9050919050565b600061084a8261082d565b9050919050565b61085a8161083f565b82525050565b60006020820190506108756000830184610851565b92915050565b61088481610762565b82525050565b600060208201905061089f600083018461087b565b92915050565b6108ae816107cd565b81146108b957600080fd5b50565b6000813590506108cb816108a5565b92915050565b6000602082840312156108e7576108e661073d565b5b60006108f5848285016108bc565b91505092915050565b600082825260208201905092915050565b7f596f75206861766520746f2061746c656173742073656e642031204554480000600082015250565b6000610945601e836108fe565b91506109508261090f565b602082019050919050565b6000602082019050818103600083015261097481610938565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109e4826107cd565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610a1757610a166109aa565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610a6c600083610a51565b9150610a7782610a5c565b600082019050919050565b6000610a8d82610a5f565b9150819050919050565b7f63616c6c204661696c6564000000000000000000000000000000000000000000600082015250565b6000610acd600b836108fe565b9150610ad882610a97565b602082019050919050565b60006020820190508181036000830152610afc81610ac0565b9050919050565b6000610b0e826107cd565b9150610b19836107cd565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610b5257610b516109aa565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b97826107cd565b9150610ba2836107cd565b925082610bb257610bb1610b5d565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610bdc81610bbd565b8114610be757600080fd5b50565b600081519050610bf981610bd3565b92915050565b6000819050919050565b610c1281610bff565b8114610c1d57600080fd5b50565b600081519050610c2f81610c09565b92915050565b600081519050610c44816108a5565b92915050565b600080600080600060a08688031215610c6657610c6561073d565b5b6000610c7488828901610bea565b9550506020610c8588828901610c20565b9450506040610c9688828901610c35565b9350506060610ca788828901610c35565b9250506080610cb888828901610bea565b9150509295509295909350565b6000610cd082610bff565b9150610cdb83610bff565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610d1a57610d196109aa565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610d5757610d566109aa565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610d9457610d936109aa565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610dd157610dd06109aa565b5b82820290509291505056fea2646970667358221220deaa090be885b321128f9df72f2f676fd979f9634b3f6d21d0859bd68582285964736f6c63430008080033",
  "devdoc": {
    "author": "Birat BC",
    "details": "This implements priceFeeds as our library to get current price feed for eth/usd",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "This implements price feed library which uses Price Converter library"
      }
    },
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "This function funds this contract"
      }
    },
    "notice": "This contract is to demo a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 327,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 331,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 336,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)104"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)104": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}